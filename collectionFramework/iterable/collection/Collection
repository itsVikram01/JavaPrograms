COLLECTION FRAMEWORK :
	----------------------

	Iterable interface : (Parent interface of Collection framework.)
	--------------------
		. The Iterable interface establishes a contract between a Collection class and code that needs to iterate over its elements. By implementing Iterable, a Collection class guarantees that it can provide an iterator object, which allows you to access elements sequentially.

		. iterator() method: The Iterable interface has a single abstract method:
			public Iterator<T> iterator();

		This method returns an Iterator object.
		The Iterator interface provides methods for traversing the elements in the collection, such as hasNext() to check if there are more elements and next() to get the next element.

		Benefits of Iterable:
		. Uniform Iteration:
			Iterable provides a consistent way to iterate over various collection classes (like ArrayList, HashSet, etc.) using the same syntax (e.g., for-each loop). This simplifies code and improves readability.
		. Decoupling:
			The Iterable interface separates the concept of a collection (data structure) from the iteration logic. This promotes cleaner code and allows for different iteration strategies.

		public class MyList implements Iterable<String> {
		  private List<String> elements = new ArrayList<>();
		  public void add(String element) {
			elements.add(element);
		  }
		  @Override
		  public Iterator<String> iterator() {
			return elements.iterator(); // Return the iterator of the underlying list
		  }
		  public static void main(String[] args) {
			MyList myList = new MyList();
			myList.add("Apple");
			myList.add("Banana");
			myList.add("Cherry");

			// Iterate using a for-each loop (works because MyList implements Iterable)
			for (String fruit : myList) {
			  System.out.println(fruit);
			}
		  }
		}



	Collection interface :
	-----------------------
		Collection interface in Java lies at the heart of the Java Collections Framework.

		Collection defines a collection as a group of elements, typically of the same type. It doesn't specify how the elements are stored internally (e.g., ordered vs. unordered).

		Collection extends the Iterable interface, inheriting the iterator() method for iterating over elements.
		Collection has several subinterfaces that define more specific collection types like List (ordered collections), Set (unordered collections that don't contain duplicates), and Queue (collections that follow a specific order for insertion and removal of elements).

		It provides a set of methods for performing common operations on collections, including:
		. add(E element): Adds an element to the collection.
		. remove(Object o): Removes an element from the collection.
		. contains(Object o): Checks if the collection contains a specific element.
		. isEmpty(): Checks if the collection is empty.
		. size(): Returns the number of elements in the collection.
		. clear(): Removes all elements from the collection.
		. iterator(): Returns an Iterator object to iterate over elements.

		Benefits of Collection:
		-----------------------
		. Standardized Interface :
			By implementing Collection, various collection classes provide a consistent set of operations, making it easier to work with different collection types using the same syntax.
		. Code Reusability :
			 Code that operates on collections can be written generically to work with any class that implements Collection, promoting code reusability and maintainability.

		Subinterfaces:
		--------------
			. List:
			-------
				. Ordered Collection: Elements are maintained in the order they were added.
				. Duplicates Allowed: You can have multiple instances of the same element in a List.
				. Indexed Access: You can access elements directly using their position (index) in the List. This starts from 0 (zero).
				. Common Implementations: ArrayList (fast random access), LinkedList (faster insertion and deletion).

			. Queue:
			--------
				. Unique Order: The Queue interface prioritizes order of insertion (First-In-First-Out, FIFO). The order elements are added in is the order they are retrieved.Elements are added at the back (enqueue) and removed from the front (dequeue). eg. A line where the first person in line gets served first.
				. Duplicates Allowed: Some Queue implementations may not allow duplicates, depending on the specific implementation.
				. Common Implementations: LinkedList (basic Queue implementation allows duplicates), PriorityQueue (prioritizes elements based on a custom order and allows duplicates)

					. Deque:
						Extends Queue and provides additional methods for inserting and removing elements from both ends. (e.g., ArrayDeque)

			. Set:
			------
				. Unordered Collection: Elements are not stored in any specific order.
				. No Duplicates: A Set cannot contain duplicate elements. If you try to add a duplicate, it's simply ignored.
				. Unique Values: Sets are useful when you only care about distinct elements and not their order.
				. Common Implementations: HashSet (fast average-case performance), LinkedHashSet (maintains insertion order), TreeSet (sorts elements based on a natural order or custom comparator).

			. Map:
			------
				. Key-Value Pairs: A Map stores key-value pairs. Keys are unique identifiers used to access the corresponding values.
				. Unordered: The order elements are added in is not preserved.
				. Key is unique and value can be duplicate.
				. Fast Retrieval: You can efficiently retrieve a value by its key.
				. Common Implementations: HashMap (fast average-case performance), LinkedHashMap (maintains insertion order), TreeMap (sorts keys based on a natural order or custom comparator).


		Subclasses:
		-----------
			. ArrayList: (implements List)
			------------
				. Uses an underlying array for storage.
				. Pros : Fast random access (get element by index), efficient for adding elements to the end.
				. Cons : Resizing the array can be slow for frequent insertions/deletions in the middle. Not thread-safe.

			. LinkedList: (implements List, Deque)
			-------------
				. Uses doubly-linked nodes to store elements.
				. Pros : Faster insertions/deletions anywhere in the list.
				. Cons : Slower random access (needs to traverse nodes to find index). Not thread-safe.

			. HashSet: (implements Set)
			----------
				. Uses a hash table for fast average-time lookups.
				. Pros : Unbeatable for checking if an element exists (contains method). Not ordered (insertion order not preserved).
				. Cons : Doesn't allow duplicate elements. Not suitable when order matters. Not thread-safe.

			. TreeSet: (implements Set, SortedSet)
			----------
				. Stores elements in a sorted order based on their natural ordering or a custom comparator.
				. Pros : Efficient for finding elements within a specific range (subSet method). Ordered set.
				. Cons : Slower average-case lookups compared to HashSet. Not suitable when order doesn't matter. Not thread-safe.

			. HashMap: (implements Map)
			----------
				. Uses a hash table for fast average-time lookups based on keys.
				. Pros : Unbeatable for retrieving values by key. Not ordered (key-value pairs not stored in insertion order).
				. Cons : Doesn't allow duplicate keys. Not suitable when order matters. Not thread-safe.

			. TreeMap: (implements Map, SortedMap)
			----------
				. Stores key-value pairs in a sorted order based on the natural ordering of keys or a custom comparator.
				. Pros : Efficient for iterating over key-value pairs in sorted order.
				. Cons : Slower average-case lookups compared to HashMap. Not suitable when order doesn't matter. Not thread-safe.


		Choosing the Right Collection :
		. Random access and frequent modifications in the middle: ArrayList for good balance, LinkedList for more insertions/deletions.
		. Fast lookups and don't care about order: HashSet for Sets, HashMap for Maps.
		. Need sorted elements: TreeSet for Sets, TreeMap for Maps.
		. Thread-safety is a concern: Consider using synchronized versions of these collections or thread-safe alternatives like ConcurrentHashMap.



		example --

		import java.util.*;
		public class CollectionSubinterfacesExample {
			public static void main(String[] args) {

				// List (ArrayList) - Ordered collection, duplicates allowed
				List<Integer> numbersList = new ArrayList<>();
				numbersList.add(10);
				numbersList.add(5);
				numbersList.add(15);
				numbersList.add(5); // Duplicates allowed

				System.out.println("Numbers List (ArrayList): " + numbersList); // [10, 5, 15, 5]

				// List (LinkedList) - Doubly-linked list, efficient for insertions/removals at any position
				List<String> colorsList = new LinkedList<>();
				colorsList.add("Red");
				colorsList.add(0, "Green"); // Efficient insertion at index 0
				colorsList.add("Blue");

				System.out.println("Colors List (LinkedList): " + colorsList); // [Green, Red, Blue]

				// List (Vector) - Thread-safe version of ArrayList (mostly legacy, use ArrayList for new code)
				List<Integer> agesList = new Vector<>();
				agesList.add(25);
				agesList.add(30);
				agesList.add(20);

				System.out.println("Ages List (Vector): " + agesList); // [25, 30, 20]

				// List (Stack) - LIFO (Last-In-First-Out) order for element access (consider using Deque for more flexibility)
				List<String> booksStack = new Stack<>();
				booksStack.push("Java for Beginners");
				booksStack.push("Data Structures and Algorithms");
				booksStack.push("Software Design Patterns");

				System.out.println("Books Stack: " + booksStack); // [Software Design Patterns, Data Structures and Algorithms, Java for Beginners] (top element first)



				// Queue (PriorityQueue) - Elements prioritized based on natural ordering or comparator (default: min heap)
				Queue<String> tasksQueue = new PriorityQueue<>();
				tasksQueue.offer("High priority task");
				tasksQueue.offer("Normal priority task");
				tasksQueue.offer("Urgent task"); // Urgent task will be processed first

				System.out.println("Tasks Queue (PriorityQueue): " + tasksQueue); // [Urgent task, High priority task, Normal priority task] (order based on priority)

				// Queue (LinkedList) - Can also be used as a Queue (FIFO - First-In-First-Out)
				Queue<Integer> numbersQueue = new LinkedList<>();
				numbersQueue.offer(1);
				numbersQueue.offer(3);
				numbersQueue.offer(2);

				System.out.println("Numbers Queue (LinkedList): " + numbersQueue); // [1, 3, 2] (FIFO order)

				// Queue (ArrayDeque) - Array-based Deque, efficient for adding/removing from both ends
				Queue<Character> charsQueue = new ArrayDeque<>();
				charsQueue.add('A');
				charsQueue.add('B');
				charsQueue.addLast('C');

				System.out.println("Characters Queue (ArrayDeque): " + charsQueue); // [A, B, C] (FIFO order)

				// Queue (ConcurrentLinkedQueue) - Thread-safe Queue implementation
				Queue<String> tasksQueue = new ConcurrentLinkedQueue<>();
				tasksQueue.offer("Task 1");
				tasksQueue.offer("Task 2");
				tasksQueue.offer("Task 3");

				System.out.println("Tasks Queue (ConcurrentLinkedQueue): " + tasksQueue); // [Task 1, Task 2, Task 3] (FIFO order, thread-safe)

				// Deque (LinkedList) - Can add/remove from both ends efficiently (also implements List)
				Deque<Character> charactersDeque = new LinkedList<>();
				charactersDeque.addLast('A');
				charactersDeque.addFirst('B');
				charactersDeque.addLast('C');

				System.out.println("Characters Deque (LinkedList): " + charactersDeque); // [B, A, C]



				// Set (HashSet) - Unique elements, no order
				Set<String> fruitsSet = new HashSet<>();
				fruitsSet.add("Apple");
				fruitsSet.add("Banana");
				fruitsSet.add("Orange");
				//fruitsSet.add("Orange"); // Duplicate won't be added

				System.out.println("Fruits Set (HashSet): " + fruitsSet); // [Apple, Banana, Orange] (order may vary)

				// Set (LinkedHashSet) - Remembers insertion order while maintaining uniqueness
				Set<String> fruitsSet = new LinkedHashSet<>();
				fruitsSet.add("Apple");
				fruitsSet.add("Banana");
				fruitsSet.add("Orange");
				fruitsSet.add("Orange"); // Duplicate won't be added

				System.out.println("Fruits Set (LinkedHashSet): " + fruitsSet); // [Apple, Banana, Orange] (maintains insertion order)

				// Set (TreeSet) - Sorted set based on natural ordering or comparator
				Set<Integer> numbersSet = new TreeSet<>();
				numbersSet.add(10);
				numbersSet.add(5);
				numbersSet.add(15);
				numbersSet.add(5); // Duplicates won't be added (as it's a Set)

				System.out.println("Numbers Set (TreeSet): " + numbersSet); // [5, 10, 15] (sorted in ascending order)



				// Map (HashMap) - Key-value pairs, unique keys
				Map<String, Integer> studentGrades = new HashMap<>();
				studentGrades.put("Alice", 90);
				studentGrades.put("Bob", 85);
				studentGrades.put("Charlie", 95); // Overwrites existing key "Charlie"

				System.out.println("Student Grades (HashMap): " + studentGrades); // {Alice=90, Bob=85, Charlie=95}

				// Map (LinkedHashMap) - Maintains insertion order for key-value pairs
				Map<String, String> countriesMap = new LinkedHashMap<>();
				countriesMap.put("India", "New Delhi");
				countriesMap.put("China", "Beijing");
				countriesMap.put("Brazil", "Brasilia");

				System.out.println("Countries Map (LinkedHashMap): " + countriesMap); // {India=New Delhi, China=Beijing, Brazil=Brasilia} (maintains insertion order)

				// Map (TreeMap) - Sorted map based on natural ordering or comparator for keys
				Map<Integer, String> studentAgesMap = new TreeMap<>();
				studentAgesMap.put(18, "Alice");
				studentAgesMap.put(20, "Bob");
				studentAgesMap.put(19, "Charlie");

				System.out.println("Student Ages Map (TreeMap): " + studentAgesMap); // {18=Alice, 19=Charlie, 20=Bob} (sorted by key in ascending order)

				// Map (ConcurrentHashMap) - Thread-safe implementation of HashMap
				Map<String, Double> employeeSalariesMap = new ConcurrentHashMap<>();
				employeeSalariesMap.put("Alice", 85000.0);
				employeeSalariesMap.put("Bob", 90000.0);
				employeeSalariesMap.put("Charlie", 78000.0);

				System.out.println("Employee Salaries Map (ConcurrentHashMap): " + employeeSalariesMap); // {Alice=85000.0, Bob=90000.0, Charlie=78000.0} (thread-safe)

				// Map (HashTable) - Legacy thread-safe implementation (less efficient than ConcurrentHashMap, use ConcurrentHashMap for new code)
				Map<String, String> coursesMap = new Hashtable<>();
				coursesMap.put("Java", "Introduction to Java Programming");
				coursesMap.put("Python", "Python for Beginners");
				coursesMap.put("C++", "Fundamentals of C++");

				System.out.println("Courses Map (HashTable): " + coursesMap); // {Java=Introduction to Java Programming, Python=Python for Beginners, C++=Fundamentals of C++} (thread-safe, legacy)

				// Map (IdentityHashMap) - Uses object identity for comparisons (reference equality)
				Map<Student, String> studentsMap = new IdentityHashMap<>();
				Student student1 = new Student("Alice", 18);
				Student student2 = new Student("Bob", 20);
				Student student3 = student1; // Same object as student1

				studentsMap.put(student1, "Java");
				studentsMap.put(student2, "Python");
				studentsMap.put(student3, "C++"); // Will overwrite the entry for student1 since they refer to the same object

				System.out.println("Students Map (IdentityHashMap): " + studentsMap); // {Student(name=Alice, age=18)=Java, Student(name=Bob, age=20)=Python} (uses reference equality)

				// Map (EnumMap) - Compact map specifically designed for enum keys
				enum Day { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY }

				Map<Day, String> weekdaysMap = new EnumMap<>(Day.class);
				weekdaysMap.put(Day.MONDAY, "Monday Motivation");
				weekdaysMap.put(Day.WEDNESDAY, "Hump Day!");
				weekdaysMap.put(Day.FRIDAY, "TGIF!"); // Only enum values of Day can be used as keys

				System.out.println("Weekdays Map (EnumMap): " + weekdaysMap); // {MONDAY=Monday Motivation, WEDNESDAY=Hump Day!, FRIDAY=TGIF!}

			}
		}