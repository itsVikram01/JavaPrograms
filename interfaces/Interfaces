Interfaces :
     In programming, an interface defines a contract.
     It outlines methods that a class must implement, without providing the actual implementation.

Key characteristics of interfaces:
     . Contain only method signatures (no method bodies).
     . Methods are implicitly public and abstract.
     . Classes can implement multiple interfaces.
     . Used for achieving polymorphism and abstraction.

Real-World Examples
    . GUI Components: Interfaces like ActionListener, MouseListener, and Runnable define contracts for components to interact with events.
    . Data Structures: Interfaces like List, Set, and Map provide common operations for different data structures.
    . Networking: Interfaces like Socket and Runnable are used for network communication and multi-threading.

Benefits of Using Interfaces
    . Polymorphism: Enables treating different objects of the same interface type uniformly.
    . Abstraction: Hides implementation details and focuses on essential behavior.
    . Loose Coupling: Reduces dependencies between classes.
    . Code Reusability: Promotes code sharing and modularity.

Additional Considerations
    . Marker Interfaces: Interfaces with no methods (e.g., Serializable) are used for tagging classes.
    . Default Methods (Java 8): Interfaces can provide default implementations for methods.
    . Static Methods (Java 8): Interfaces can have static methods.