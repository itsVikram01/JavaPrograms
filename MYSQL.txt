MYSQL : 
-------
	MySQL is a freely available, open-source relational database management system (RDBMS) that uses the Structured Query Language (SQL) for data manipulation. It's popular for its speed, reliability, and ease of use, making it a great choice for web applications and various other projects.
	
		SQL Query:
			SELECT product_name FROM products WHERE product_id = 10;
			
			INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

		HQL Query:
			SessionFactory sessionFactory = configuration.buildSessionFactory();
			Session session = null;
			String retrievedName = null;
			try {
				session = sessionFactory.openSession();
				// Your code from the prompt using the session object
				String query = "SELECT p.name FROM Product p WHERE p.id = :productId";
				Query hibernateQuery = session.createQuery(query);
				hibernateQuery.setParameter("productId", 10); // Set the parameter value
				List<String> productNames = (List<String>) hibernateQuery.list();
				retrievedName = productNames.get(0); // Access the first product name (assuming there's a result)
			} finally {
				if (session != null) {
					session.close();
				}
			}
			System.out.println("Retrieved product name: " + retrievedName);


	
	Advantages of using MySQL : 
		. Open-source: Free to use and modify, fostering a large developer community and wide availability.
		. Performance: Generally considered fast and efficient, especially for smaller to medium-sized datasets.
		. Scalability: Can handle large datasets and high traffic volumes, often scaling horizontally by adding more servers.
		. Ease of use: Relatively simple to learn and use, with a well-documented syntax and many tools available.
		. Portability: Runs on various operating systems, making it adaptable to different environments.
		
	Data type in MySQL : 
		. Numeric: INT (integers), FLOAT (decimal numbers), DECIMAL (fixed-point decimals).
		. Character: CHAR (fixed-length strings), VARCHAR (variable-length strings), TEXT (long text strings).
		. Date/Time: DATE, TIME, DATETIME, TIMESTAMP.
		. Others: ENUM (predefined set of values), SET (multiple values from a set).
		
		eg-
			CREATE TABLE users (
				id INT PRIMARY KEY AUTO_INCREMENT,
				username VARCHAR(50) NOT NULL UNIQUE,
				email VARCHAR(100) NOT NULL UNIQUE,
				created_at DATETIME DEFAULT CURRENT_TIMESTAMP
			);

	Difference between a primary key and a unique key : 
		. Primary key: 
			A column (or group of columns) that uniquely identifies each row in a table. There can only be one primary key per table, and it cannot contain null values.
		. Unique key: 
			A column (or group of columns) that ensures no duplicate values exist within that column(s). A table can have multiple unique keys in addition to the primary key, and they can allow null values.
			
		eg- 
			CREATE TABLE products (
				product_id INT PRIMARY KEY AUTO_INCREMENT,
				name VARCHAR(255) NOT NULL UNIQUE,
				category VARCHAR(50) NOT NULL,
				price DECIMAL(10, 2) NOT NULL
			);
			
			In this example, product_id is the primary key, uniquely identifying each product. The name column has a unique key constraint, ensuring no duplicate product names exist.
	
	Foreign key in mySQL :
		foreign key is a column (or set of columns) in one table that references the primary key of another table. It establishes a link between related data and helps enforce referential integrity in your database.
		
		
	Joins in MySQL : 
		. Inner join: Returns rows where there is a match in both tables based on the join condition.
		eg-
			SELECT orders.order_id, customers.name, products.product_name
			FROM orders
			INNER JOIN customers ON orders.customer_id = customers.id
			INNER JOIN products ON orders.product_id = products.id;
			
			SELECT *
			FROM parent
			INNER JOIN child ON parent.lastname = child.lastname
			WHERE parent.nationality = 'Indian' AND child.nationality = 'Indian';

		. Left join: Returns all rows from the left table and matching rows from the right table. If there's no match in the right table, null values are returned for unmatched columns.
		. Right join: Similar to a left join, but returns all rows from the right table and matching rows from the left.
		. Full join: Returns all rows from both tables, including unmatched rows with null values in the non-matching table.

	Explain how indexes work in MySQL :
		. Indexes are data structures that act like an index in a book, speeding up data retrieval in MySQL. They map specific values in a column or group of columns to the corresponding row locations in the table.
		. When you query a table using a WHERE clause that references an indexed column, MySQL can quickly locate the relevant rows using the index instead of scanning the entire table.
		eg;
			CREATE TABLE articles (
				id INT PRIMARY KEY AUTO_INCREMENT,
				title VARCHAR(255) NOT NULL,
				content TEXT,
				category VARCHAR(50) NOT NULL,
				INDEX (category)  // -- Create an index on the 'category' column
			);

	
	
	Stored procedure in MySQL : 
		A stored procedure in MySQL is a predefined block of SQL statements that you can save and reuse with a single call. It acts like a subroutine or a mini-program within the database itself. 
	
		Here are some key characteristics of stored procedures:
		Functionality:
			. Groups multiple SQL statements into a named unit, promoting code reusability and modularity.
			. Can accept input parameters, making them flexible for handling different scenarios.
			. May return output values or modify data based on the logic within the procedure.
		
		Benefits:
			. Reusability: Avoids rewriting complex SQL queries in multiple places, streamlining code and simplifying maintenance.
			. Modular Design: Encapsulates data access logic, improving code organization and readability.
			. Security: Can enforce data access control by implementing business logic within the procedure instead of directly in application code.
			. Performance: In certain cases, stored procedures can improve performance by pre-compiling the SQL statements and reducing network traffic (if sending fewer, more complex procedures instead of many individual queries).
		
		Structure:
			A stored procedure is created using the CREATE PROCEDURE statement. 
			
			It typically consists of three parts: 
				. Procedure Name: A unique identifier for the procedure.
				. Parameters (Optional): Input, output, or inout parameters to allow for dynamic behavior.
				. SQL Statements: The actual SQL code that defines the procedure's logic, often involving SELECT, INSERT, UPDATE, DELETE, or other database operations.
				
			Example : 
				CREATE PROCEDURE calculate_order_total(IN order_id INT)
				BEGIN
				  DECLARE total DECIMAL(10, 2);

				  SELECT SUM(price * quantity) INTO total
				  FROM order_items
				  WHERE order_id = order_id;

				  SELECT total;
				END;
				
			This procedure takes an order_id as input, calculates the total price by summing the product of price and quantity for all items in the order, and then returns the total value.

	
	
	
	View in MySQL :
		A view is a virtual table that provides a customized way to see data from underlying tables. It doesn't store data itself but presents a query result as if it were a table. Views can simplify complex queries, enforce data security by restricting access to certain columns, and improve code reusability.
		
		eg- 
			CREATE VIEW active_users AS
			SELECT id, username, email
			FROM users
			WHERE status = 'active';

		This creates a view named active_users that shows only users with an active status from the users table.
		
		
	How Transactions work in MySQL : 
		A transaction is a logical unit of work that involves one or more SQL statements. Transactions ensure data consistency by guaranteeing that all changes within a transaction either succeed entirely or fail completely. 
		
		ACID : MySQL maintain data integrity through four properties:
		. Atomicity: All statements in a transaction are treated as a single unit. Either all succeed or all fail.
		. Consistency: The transaction brings the database from one valid state to another.
		. Isolation: Transactions are isolated from each other, preventing data inconsistencies caused by concurrent access.
		. Durability: Once a transaction commits, the changes become permanent.
		
		eg-
			START TRANSACTION;
			INSERT INTO orders (customer_id, product_id, quantity) VALUES (1, 10, 2);
			UPDATE inventory SET stock = stock - 2 WHERE product_id = 10;
			COMMIT;
			
		This transaction attempts to place an order and update the inventory. If either statement fails, the entire transaction is rolled back, ensuring data integrity.


	
	Optimize queries in MySQL :
		. Proper indexing: Create indexes on columns frequently used in WHERE clauses and JOIN conditions.
			Non-optimal query:
				SELECT * FROM users WHERE username = 'john_doe';
			
			Optimized query with index:
				CREATE INDEX idx_username ON users(username);  // Create an index on the username column
				SELECT * FROM users WHERE username = 'john_doe';

		. EXPLAIN plan: Use the EXPLAIN statement to analyze query execution plans and identify bottlenecks.
			Original query:
				SELECT * FROM orders o
				INNER JOIN order_items oi ON o.id = oi.order_id
				WHERE o.status = 'shipped' AND oi.product_category = 'electronics';
			
			Analyze the query plan:
				EXPLAIN SELECT * FROM orders o
				INNER JOIN order_items oi ON o.id = oi.order_id
				WHERE o.status = 'shipped' AND oi.product_category = 'electronics';

		. Optimize WHERE clauses: Avoid using negation (NOT) in WHERE clauses as it can force full table scans. Consider rewriting complex conditions.
			Non-optimal query (avoid negation in WHERE):
				SELECT * FROM products WHERE category != 'clothing';
					This query forces a full table scan because the database needs to check every row to see if the category is not clothing.
			
			Optimized query (use positive condition):
				SELECT * FROM products WHERE category = 'clothing' OR category IS NULL;

			
			
		. *Minimize SELECT : Only select the columns you actually need, avoiding unnecessary data retrieval.
			Non-optimal query:
				SELECT * FROM customers; // -- Selects all columns, even if not all are needed

			Optimized query:
				SELECT customer_id, name, email FROM customers;  // -- Selects only the needed columns

		. Use appropriate data types: Choose data types that efficiently store the actual data values.
			Non-optimal:
				CREATE TABLE products (
					id INT,
					price VARCHAR(255) // -- Using string to store price (inefficient)
				);
				
			Optimized:
				CREATE TABLE products (
					id INT,
					price DECIMAL(10,2) // -- Using appropriate decimal data type
				);


		
		
	Replication techniques in MySQL :
		Replication allows you to copy data from a primary server (master) to one or more secondary servers (slaves). This enhances data redundancy, scalability, and fault tolerance. 
		
		Common replication methods include:
		. Master-slave replication: Asynchronous data replication from the master to slaves.
		. Multi-master replication: Enables updates on any master, requiring careful configuration to maintain data consistency.
		
	
	Normalization in a database : 
		Normalization is the process of organizing tables to minimize redundancy and improve data integrity. It involves breaking down tables into smaller, more focused tables with defined relationships using primary and foreign keys. Different normal forms (1NF, 2NF, 3NF, etc.) define progressive levels of data organization.
		
		
		
	How would you handle a large dataset that doesn't fit comfortably in a single MySQL table :
	. Partitioning: Divide the table horizontally by splitting data across multiple tables based on a defined partition key (e.g., date range, customer ID).
	. Sharding: Vertically partition data across multiple servers based on a sharding key (e.g., user ID).
	. NoSQL databases: Consider using NoSQL databases (e.g., MongoDB) for very large or unstructured datasets that don't require the strict schema enforcement of relational databases.
	


	JOINS :
	-------
		. INNER JOIN: 
			. Returns rows that have matching values in both tables.
			
				SELECT * FROM table1 INNER JOIN table2 ON table1.column = table2.column;
			
			. Suppose we have two tables: Orders and Customers. The CustomerID column in the Orders table refers to the corresponding CustomerID in the Customers table.
			
				SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
				FROM Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

			
		. LEFT JOIN (LEFT OUTER JOIN): 
			. Returns all rows from the left table, and the matched rows from the right table. If there is no match, null values are returned for the right table.
			
				SELECT * FROM table1 LEFT JOIN table2 ON table1.column = table2.column;
				
				SELECT officers.officer_name, officers.address, students.course_name, students.student_name
				FROM officers LEFT JOIN students ON officers.officer_id = students.student_id;

			
		. RIGHT JOIN (RIGHT OUTER JOIN): 
			. Returns all rows from the right table, and the matched rows from the left table. If there is no match, null values are returned for the left table.
			
				SELECT * FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;
			
		. FULL JOIN (FULL OUTER JOIN): 
			. Returns all rows when there is a match in either left or right table. If there is no match, null values are returned for the missing side.
			
				SELECT * FROM table1 FULL OUTER JOIN table2 ON table1 column = table2.column;
			
		. CROSS JOIN: 
			Returns the Cartesian product of two tables, meaning every row from the first table is combined with every row from the second table.
			
			SELECT * FROM table1 CROSS JOIN table2;
			
		. NATURAL JOIN: 
			Similar to INNER JOIN, but implicitly joins tables on columns with the same name and data type.
			
			SELECT * FROM table1 NATURAL JOIN table2;
			
		. SELF JOIN: 
			Joins a table with itself, often used to compare rows within the same table.
			
			SELECT e1.name AS employee_name, e2.name AS manager_name FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.id;




===========================================================================================


ACID stands for Atomicity, Consistency, Isolation, and Durability. These properties are essential for maintaining the reliability and integrity of transactions within a database system. Let’s break them down:

Atomicity:
	Atomicity ensures that a transaction either happens completely or not at all. There’s no halfway point. Imagine it as the “all or nothing” rule.
	If a transaction fails (say, due to an error or system crash) after completing part of its operations, any changes made to the database during that partial execution are rolled back. Conversely, if the transaction successfully completes, the changes become visible.
	Example: Consider transferring 100 units from account X to account Y. If the transaction fails after deducting from X but before adding to Y, we’d end up with an inconsistent state. Atomicity prevents this.

Consistency:
	Consistency ensures that the database remains in a valid state before and after a transaction.
	Integrity constraints (such as total balances) must be maintained. For instance, if the total balance before and after a transaction doesn’t match, we have an inconsistency.
	Example: If T1 completes but T2 fails, the database becomes inconsistent.

Isolation:
	Isolation allows multiple transactions to occur concurrently without interfering with each other.
	Changes made by one transaction should not be visible to others until they are committed or written to memory.
	Ensuring isolation prevents scenarios where interleaved operations lead to incorrect results.
	Example: Two transactions, T and T’', reading and modifying the same data concurrently.

Durability:
	Durability guarantees that once a transaction is committed, its changes are permanent even in the face of system failures (e.g., power outage or crash).
	The database should survive such events and maintain its state.
	Example: If you’ve successfully transferred money, it should stay transferred, no matter what happens next.